State 151 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMI
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMI
    9     | CONTINUE SEMI
   10     | block
   11     | funcdef
   12     | SEMI

   13 expr: assignexpr
   14     | expr PLUS expr
   15     | expr MINUS expr
   16     | expr MUL expr
   17     | expr DIV expr
   18     | expr MOD expr
   19     | expr GREATER expr
   20     | expr GREATER_EQ expr
   21     | expr LESS expr
   22     | expr LESS_EQ expr
   23     | expr EQ expr
   24     | expr NOT_EQ expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: L_PAR expr R_PAR
   29     | UMINUS expr
   30     | NOT expr
   31     | D_PLUS lvalue
   32     | lvalue D_PLUS
   33     | D_MINUS lvalue
   34     | lvalue D_MINUS
   35     | primary

   36 assignexpr: lvalue ASSIGN expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | L_PAR funcdef R_PAR
   41        | const

   42 lvalue: ID
   43       | LOCAL ID
   44       | D_COLON ID
   45       | member

   46 member: lvalue DOT ID
   47       | lvalue L_BRA expr R_BRA
   48       | call DOT ID
   49       | call L_BRA expr R_BRA

   50 call: call L_PAR elist R_PAR
   51     | lvalue callsuffix
   52     | L_PAR funcdef R_PAR L_PAR elist R_PAR

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: L_PAR elist R_PAR

   56 methodcall: D_DOT ID L_PAR elist R_PAR

   57 elist: expr
   58      | elist COMMA expr
   59      | %empty

   60 objectdef: L_BRA elist R_BRA
   61          | L_BRA indexed R_BRA

   62 indexed: indexedelem
   63        | indexed COMMA indexedelem

   64 indexedelem: LC_BRA expr COLON expr RC_BRA

   65 rec_stmt: rec_stmt stmt
   66         | %empty

   67 $@1: %empty

   68 block: LC_BRA $@1 rec_stmt RC_BRA

   69 $@2: %empty

   70 $@3: %empty

   71 funcdef: FUNC $@2 L_PAR $@3 idlist R_PAR block

   72 $@4: %empty

   73 $@5: %empty

   74 funcdef: FUNC ID $@4 L_PAR $@5 idlist R_PAR block

   75 const: INT
   76      | REAL
   77      | STRING
   78      | NIL
   79      | TRUE
   80      | FALSE

   81 idlist: ID
   82       | idlist COMMA ID
   83       | %empty

   84 ifstmt: IF L_PAR expr R_PAR stmt
   85       | IF L_PAR expr R_PAR stmt ELSE stmt

   86 $@6: %empty

   87 $@7: %empty

   88 $@8: %empty

   89 whilestmt: WHILE $@6 L_PAR $@7 expr R_PAR $@8 stmt

   90 $@9: %empty

   91 $@10: %empty

   92 $@11: %empty

   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr SEMI elist R_PAR $@11 stmt

   94 returnstmt: RETURN SEMI
   95           | RETURN expr SEMI


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ASSIGN <strval> (258) 36
    OR <strval> (259) 26
    AND <strval> (260) 25
    EQ <strval> (261) 23
    NOT_EQ <strval> (262) 24
    GREATER <strval> (263) 19
    GREATER_EQ <strval> (264) 20
    LESS <strval> (265) 21
    LESS_EQ <strval> (266) 22
    PLUS <strval> (267) 14
    MINUS <strval> (268) 15
    MUL <strval> (269) 16
    DIV <strval> (270) 17
    MOD <strval> (271) 18
    NOT (272) 30
    D_PLUS <strval> (273) 31 32
    D_MINUS <strval> (274) 33 34
    UMINUS <strval> (275) 29
    DOT <strval> (276) 46 48
    D_DOT <strval> (277) 56
    L_BRA <strval> (278) 47 49 60 61
    R_BRA <strval> (279) 47 49 60 61
    L_PAR <strval> (280) 28 40 50 52 55 56 71 74 84 85 89 93
    R_PAR <strval> (281) 28 40 50 52 55 56 71 74 84 85 89 93
    INT <intval> (282) 75
    REAL <floatval> (283) 76
    ID <strval> (284) 42 43 44 46 48 56 74 81 82
    STRING <strval> (285) 77
    IF <strval> (286) 84 85
    ELSE <strval> (287) 85
    WHILE <strval> (288) 89
    FOR <strval> (289) 93
    FUNC <strval> (290) 71 74
    RETURN <strval> (291) 94 95
    BREAK <strval> (292) 8
    CONTINUE <strval> (293) 9
    LOCAL <strval> (294) 43
    TRUE <strval> (295) 79
    FALSE <strval> (296) 80
    NIL <strval> (297) 78
    LC_BRA <strval> (298) 64 68
    RC_BRA <strval> (299) 64 68
    SEMI <strval> (300) 3 8 9 12 93 94 95
    COMMA <strval> (301) 58 63 82
    COLON <strval> (302) 64
    D_COLON <strval> (303) 44


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt <strval> (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 65 84 85 89 93
    expr <intval> (52)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 47 49 57 58 64 84 85 89 93 95
    term <strval> (53)
        on left: 28 29 30 31 32 33 34 35
        on right: 27
    assignexpr <intval> (54)
        on left: 36
        on right: 13
    primary <strval> (55)
        on left: 37 38 39 40 41
        on right: 35
    lvalue <strval> (56)
        on left: 42 43 44 45
        on right: 31 32 33 34 36 37 46 47 51
    member <strval> (57)
        on left: 46 47 48 49
        on right: 45
    call <strval> (58)
        on left: 50 51 52
        on right: 38 48 49 50
    callsuffix <strval> (59)
        on left: 53 54
        on right: 51
    normcall <strval> (60)
        on left: 55
        on right: 53
    methodcall (61)
        on left: 56
        on right: 54
    elist <strval> (62)
        on left: 57 58 59
        on right: 50 52 55 56 58 60 93
    objectdef <strval> (63)
        on left: 60 61
        on right: 39
    indexed <strval> (64)
        on left: 62 63
        on right: 61 63
    indexedelem <strval> (65)
        on left: 64
        on right: 62 63
    rec_stmt <strval> (66)
        on left: 65 66
        on right: 65 68
    block <strval> (67)
        on left: 68
        on right: 10 71 74
    $@1 (68)
        on left: 67
        on right: 68
    funcdef (69)
        on left: 71 74
        on right: 11 40 52
    $@2 (70)
        on left: 69
        on right: 71
    $@3 (71)
        on left: 70
        on right: 71
    $@4 (72)
        on left: 72
        on right: 74
    $@5 (73)
        on left: 73
        on right: 74
    const <strval> (74)
        on left: 75 76 77 78 79 80
        on right: 41
    idlist <strval> (75)
        on left: 81 82 83
        on right: 71 74 82
    ifstmt <strval> (76)
        on left: 84 85
        on right: 4
    whilestmt <strval> (77)
        on left: 89
        on right: 5
    $@6 (78)
        on left: 86
        on right: 89
    $@7 (79)
        on left: 87
        on right: 89
    $@8 (80)
        on left: 88
        on right: 89
    forstmt <strval> (81)
        on left: 93
        on right: 6
    $@9 (82)
        on left: 90
        on right: 93
    $@10 (83)
        on left: 91
        on right: 93
    $@11 (84)
        on left: 92
        on right: 93
    returnstmt <strval> (85)
        on left: 94 95
        on right: 7


State 0

    0 $accept: . program $end

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   30 term: NOT . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 42
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 2

   31 term: D_PLUS . lvalue

    L_PAR    shift, and go to state 43
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 44
    member  go to state 32
    call    go to state 45


State 3

   33 term: D_MINUS . lvalue

    L_PAR    shift, and go to state 43
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 46
    member  go to state 32
    call    go to state 45


State 4

   29 term: UMINUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 47
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 5

   60 objectdef: L_BRA . elist R_BRA
   61          | L_BRA . indexed R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    LC_BRA   shift, and go to state 48
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr         go to state 49
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 50
    objectdef    go to state 34
    indexed      go to state 51
    indexedelem  go to state 52
    const        go to state 37


State 6

   28 term: L_PAR . expr R_PAR
   40 primary: L_PAR . funcdef R_PAR
   52 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    FUNC     shift, and go to state 14
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 54
    const       go to state 37


State 7

   75 const: INT .

    $default  reduce using rule 75 (const)


State 8

   76 const: REAL .

    $default  reduce using rule 76 (const)


State 9

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


State 10

   77 const: STRING .

    $default  reduce using rule 77 (const)


State 11

   84 ifstmt: IF . L_PAR expr R_PAR stmt
   85       | IF . L_PAR expr R_PAR stmt ELSE stmt

    L_PAR  shift, and go to state 55


State 12

   89 whilestmt: WHILE . $@6 L_PAR $@7 expr R_PAR $@8 stmt

    $default  reduce using rule 86 ($@6)

    $@6  go to state 56


State 13

   93 forstmt: FOR . $@9 L_PAR $@10 elist SEMI expr SEMI elist R_PAR $@11 stmt

    $default  reduce using rule 90 ($@9)

    $@9  go to state 57


State 14

   71 funcdef: FUNC . $@2 L_PAR $@3 idlist R_PAR block
   74        | FUNC . ID $@4 L_PAR $@5 idlist R_PAR block

    ID  shift, and go to state 58

    $default  reduce using rule 69 ($@2)

    $@2  go to state 59


State 15

   94 returnstmt: RETURN . SEMI
   95           | RETURN . expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    SEMI     shift, and go to state 60
    D_COLON  shift, and go to state 24

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 16

    8 stmt: BREAK . SEMI

    SEMI  shift, and go to state 62


State 17

    9 stmt: CONTINUE . SEMI

    SEMI  shift, and go to state 63


State 18

   43 lvalue: LOCAL . ID

    ID  shift, and go to state 64


State 19

   79 const: TRUE .

    $default  reduce using rule 79 (const)


State 20

   80 const: FALSE .

    $default  reduce using rule 80 (const)


State 21

   78 const: NIL .

    $default  reduce using rule 78 (const)


State 22

   68 block: LC_BRA . $@1 rec_stmt RC_BRA

    $default  reduce using rule 67 ($@1)

    $@1  go to state 65


State 23

   12 stmt: SEMI .

    $default  reduce using rule 12 (stmt)


State 24

   44 lvalue: D_COLON . ID

    ID  shift, and go to state 66


State 25

    0 $accept: program . $end

    $end  shift, and go to state 67


State 26

    1 program: stmt . program

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 68
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMI
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    SEMI        shift, and go to state 82


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . D_PLUS
   34     | lvalue . D_MINUS
   36 assignexpr: lvalue . ASSIGN expr
   37 primary: lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    ASSIGN   shift, and go to state 83
    D_PLUS   shift, and go to state 84
    D_MINUS  shift, and go to state 85
    DOT      shift, and go to state 86
    D_DOT    shift, and go to state 87
    L_BRA    shift, and go to state 88
    L_PAR    shift, and go to state 89

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 90
    normcall    go to state 91
    methodcall  go to state 92


State 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 33

   38 primary: call .
   48 member: call . DOT ID
   49       | call . L_BRA expr R_BRA
   50 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 93
    L_BRA  shift, and go to state 94
    L_PAR  shift, and go to state 95

    $default  reduce using rule 38 (primary)


State 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 43

   52 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    FUNC  shift, and go to state 14

    funcdef  go to state 96


State 44

   31 term: D_PLUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    DOT    shift, and go to state 86
    D_DOT  shift, and go to state 87
    L_BRA  shift, and go to state 88
    L_PAR  shift, and go to state 89

    $default  reduce using rule 31 (term)

    callsuffix  go to state 90
    normcall    go to state 91
    methodcall  go to state 92


State 45

   48 member: call . DOT ID
   49       | call . L_BRA expr R_BRA
   50 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 93
    L_BRA  shift, and go to state 94
    L_PAR  shift, and go to state 95


State 46

   33 term: D_MINUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    DOT    shift, and go to state 86
    D_DOT  shift, and go to state 87
    L_BRA  shift, and go to state 88
    L_PAR  shift, and go to state 89

    $default  reduce using rule 33 (term)

    callsuffix  go to state 90
    normcall    go to state 91
    methodcall  go to state 92


State 47

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: UMINUS expr .

    $default  reduce using rule 29 (term)


State 48

   64 indexedelem: LC_BRA . expr COLON expr RC_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 97
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 49

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   57 elist: expr .

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    $default  reduce using rule 57 (elist)


State 50

   58 elist: elist . COMMA expr
   60 objectdef: L_BRA elist . R_BRA

    R_BRA  shift, and go to state 98
    COMMA  shift, and go to state 99


State 51

   61 objectdef: L_BRA indexed . R_BRA
   63 indexed: indexed . COMMA indexedelem

    R_BRA  shift, and go to state 100
    COMMA  shift, and go to state 101


State 52

   62 indexed: indexedelem .

    $default  reduce using rule 62 (indexed)


State 53

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   28 term: L_PAR expr . R_PAR

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    R_PAR       shift, and go to state 102


State 54

   40 primary: L_PAR funcdef . R_PAR
   52 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 103


State 55

   84 ifstmt: IF L_PAR . expr R_PAR stmt
   85       | IF L_PAR . expr R_PAR stmt ELSE stmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 104
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 56

   89 whilestmt: WHILE $@6 . L_PAR $@7 expr R_PAR $@8 stmt

    L_PAR  shift, and go to state 105


State 57

   93 forstmt: FOR $@9 . L_PAR $@10 elist SEMI expr SEMI elist R_PAR $@11 stmt

    L_PAR  shift, and go to state 106


State 58

   74 funcdef: FUNC ID . $@4 L_PAR $@5 idlist R_PAR block

    $default  reduce using rule 72 ($@4)

    $@4  go to state 107


State 59

   71 funcdef: FUNC $@2 . L_PAR $@3 idlist R_PAR block

    L_PAR  shift, and go to state 108


State 60

   94 returnstmt: RETURN SEMI .

    $default  reduce using rule 94 (returnstmt)


State 61

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   95 returnstmt: RETURN expr . SEMI

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    SEMI        shift, and go to state 109


State 62

    8 stmt: BREAK SEMI .

    $default  reduce using rule 8 (stmt)


State 63

    9 stmt: CONTINUE SEMI .

    $default  reduce using rule 9 (stmt)


State 64

   43 lvalue: LOCAL ID .

    $default  reduce using rule 43 (lvalue)


State 65

   68 block: LC_BRA $@1 . rec_stmt RC_BRA

    $default  reduce using rule 66 (rec_stmt)

    rec_stmt  go to state 110


State 66

   44 lvalue: D_COLON ID .

    $default  reduce using rule 44 (lvalue)


State 67

    0 $accept: program $end .

    $default  accept


State 68

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 69

   26 expr: expr OR . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 111
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 70

   25 expr: expr AND . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 112
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 71

   23 expr: expr EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 113
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 72

   24 expr: expr NOT_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 73

   19 expr: expr GREATER . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 74

   20 expr: expr GREATER_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 75

   21 expr: expr LESS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 76

   22 expr: expr LESS_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 77

   14 expr: expr PLUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 78

   15 expr: expr MINUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 79

   16 expr: expr MUL . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 80

   17 expr: expr DIV . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 81

   18 expr: expr MOD . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 82

    3 stmt: expr SEMI .

    $default  reduce using rule 3 (stmt)


State 83

   36 assignexpr: lvalue ASSIGN . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 84

   32 term: lvalue D_PLUS .

    $default  reduce using rule 32 (term)


State 85

   34 term: lvalue D_MINUS .

    $default  reduce using rule 34 (term)


State 86

   46 member: lvalue DOT . ID

    ID  shift, and go to state 125


State 87

   56 methodcall: D_DOT . ID L_PAR elist R_PAR

    ID  shift, and go to state 126


State 88

   47 member: lvalue L_BRA . expr R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 89

   55 normcall: L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 128
    objectdef   go to state 34
    const       go to state 37


State 90

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


State 91

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


State 92

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


State 93

   48 member: call DOT . ID

    ID  shift, and go to state 129


State 94

   49 member: call L_BRA . expr R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 130
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 95

   50 call: call L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 131
    objectdef   go to state 34
    const       go to state 37


State 96

   52 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 132


State 97

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 indexedelem: LC_BRA expr . COLON expr RC_BRA

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    COLON       shift, and go to state 133


State 98

   60 objectdef: L_BRA elist R_BRA .

    $default  reduce using rule 60 (objectdef)


State 99

   58 elist: elist COMMA . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 134
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 100

   61 objectdef: L_BRA indexed R_BRA .

    $default  reduce using rule 61 (objectdef)


State 101

   63 indexed: indexed COMMA . indexedelem

    LC_BRA  shift, and go to state 48

    indexedelem  go to state 135


State 102

   28 term: L_PAR expr R_PAR .

    $default  reduce using rule 28 (term)


State 103

   40 primary: L_PAR funcdef R_PAR .
   52 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 136

    $default  reduce using rule 40 (primary)


State 104

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   84 ifstmt: IF L_PAR expr . R_PAR stmt
   85       | IF L_PAR expr . R_PAR stmt ELSE stmt

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    R_PAR       shift, and go to state 137


State 105

   89 whilestmt: WHILE $@6 L_PAR . $@7 expr R_PAR $@8 stmt

    $default  reduce using rule 87 ($@7)

    $@7  go to state 138


State 106

   93 forstmt: FOR $@9 L_PAR . $@10 elist SEMI expr SEMI elist R_PAR $@11 stmt

    $default  reduce using rule 91 ($@10)

    $@10  go to state 139


State 107

   74 funcdef: FUNC ID $@4 . L_PAR $@5 idlist R_PAR block

    L_PAR  shift, and go to state 140


State 108

   71 funcdef: FUNC $@2 L_PAR . $@3 idlist R_PAR block

    $default  reduce using rule 70 ($@3)

    $@3  go to state 141


State 109

   95 returnstmt: RETURN expr SEMI .

    $default  reduce using rule 95 (returnstmt)


State 110

   65 rec_stmt: rec_stmt . stmt
   68 block: LC_BRA $@1 rec_stmt . RC_BRA

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    RC_BRA    shift, and go to state 142
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 143
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 111

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    $default  reduce using rule 26 (expr)


State 112

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    $default  reduce using rule 25 (expr)


State 113

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   23     | expr EQ expr .
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 114

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   24     | expr NOT_EQ expr .
   25     | expr . AND expr
   26     | expr . OR expr

    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 115

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   19     | expr GREATER expr .
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 77
    MINUS  shift, and go to state 78
    MUL    shift, and go to state 79
    DIV    shift, and go to state 80
    MOD    shift, and go to state 81

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 19 (expr)


State 116

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   20     | expr GREATER_EQ expr .
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 77
    MINUS  shift, and go to state 78
    MUL    shift, and go to state 79
    DIV    shift, and go to state 80
    MOD    shift, and go to state 81

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 20 (expr)


State 117

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   21     | expr LESS expr .
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 77
    MINUS  shift, and go to state 78
    MUL    shift, and go to state 79
    DIV    shift, and go to state 80
    MOD    shift, and go to state 81

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 118

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   22     | expr LESS_EQ expr .
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 77
    MINUS  shift, and go to state 78
    MUL    shift, and go to state 79
    DIV    shift, and go to state 80
    MOD    shift, and go to state 81

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 119

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 14 (expr)


State 120

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 15 (expr)


State 121

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   16     | expr MUL expr .
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


State 122

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   17     | expr DIV expr .
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 123

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   18     | expr MOD expr .
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 124

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue ASSIGN expr .

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    $default  reduce using rule 36 (assignexpr)


State 125

   46 member: lvalue DOT ID .

    $default  reduce using rule 46 (member)


State 126

   56 methodcall: D_DOT ID . L_PAR elist R_PAR

    L_PAR  shift, and go to state 144


State 127

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   47 member: lvalue L_BRA expr . R_BRA

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    R_BRA       shift, and go to state 145


State 128

   55 normcall: L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 146
    COMMA  shift, and go to state 99


State 129

   48 member: call DOT ID .

    $default  reduce using rule 48 (member)


State 130

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   49 member: call L_BRA expr . R_BRA

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    R_BRA       shift, and go to state 147


State 131

   50 call: call L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 148
    COMMA  shift, and go to state 99


State 132

   52 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 136


State 133

   64 indexedelem: LC_BRA expr COLON . expr RC_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 149
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 134

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   58 elist: elist COMMA expr .

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81

    $default  reduce using rule 58 (elist)


State 135

   63 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 63 (indexed)


State 136

   52 call: L_PAR funcdef R_PAR L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 150
    objectdef   go to state 34
    const       go to state 37


State 137

   84 ifstmt: IF L_PAR expr R_PAR . stmt
   85       | IF L_PAR expr R_PAR . stmt ELSE stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 151
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 138

   89 whilestmt: WHILE $@6 L_PAR $@7 . expr R_PAR $@8 stmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 152
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 139

   93 forstmt: FOR $@9 L_PAR $@10 . elist SEMI expr SEMI elist R_PAR $@11 stmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 153
    objectdef   go to state 34
    const       go to state 37


State 140

   74 funcdef: FUNC ID $@4 L_PAR . $@5 idlist R_PAR block

    $default  reduce using rule 73 ($@5)

    $@5  go to state 154


State 141

   71 funcdef: FUNC $@2 L_PAR $@3 . idlist R_PAR block

    ID  shift, and go to state 155

    $default  reduce using rule 83 (idlist)

    idlist  go to state 156


State 142

   68 block: LC_BRA $@1 rec_stmt RC_BRA .

    $default  reduce using rule 68 (block)


State 143

   65 rec_stmt: rec_stmt stmt .

    $default  reduce using rule 65 (rec_stmt)


State 144

   56 methodcall: D_DOT ID L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 157
    objectdef   go to state 34
    const       go to state 37


State 145

   47 member: lvalue L_BRA expr R_BRA .

    $default  reduce using rule 47 (member)


State 146

   55 normcall: L_PAR elist R_PAR .

    $default  reduce using rule 55 (normcall)


State 147

   49 member: call L_BRA expr R_BRA .

    $default  reduce using rule 49 (member)


State 148

   50 call: call L_PAR elist R_PAR .

    $default  reduce using rule 50 (call)


State 149

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 indexedelem: LC_BRA expr COLON expr . RC_BRA

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    RC_BRA      shift, and go to state 158


State 150

   52 call: L_PAR funcdef R_PAR L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 159
    COMMA  shift, and go to state 99


State 151

   84 ifstmt: IF L_PAR expr R_PAR stmt .
   85       | IF L_PAR expr R_PAR stmt . ELSE stmt

    ELSE  shift, and go to state 160

    ELSE      [reduce using rule 84 (ifstmt)]
    $default  reduce using rule 84 (ifstmt)


State 152

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   89 whilestmt: WHILE $@6 L_PAR $@7 expr . R_PAR $@8 stmt

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    R_PAR       shift, and go to state 161


State 153

   58 elist: elist . COMMA expr
   93 forstmt: FOR $@9 L_PAR $@10 elist . SEMI expr SEMI elist R_PAR $@11 stmt

    SEMI   shift, and go to state 162
    COMMA  shift, and go to state 99


State 154

   74 funcdef: FUNC ID $@4 L_PAR $@5 . idlist R_PAR block

    ID  shift, and go to state 155

    $default  reduce using rule 83 (idlist)

    idlist  go to state 163


State 155

   81 idlist: ID .

    $default  reduce using rule 81 (idlist)


State 156

   71 funcdef: FUNC $@2 L_PAR $@3 idlist . R_PAR block
   82 idlist: idlist . COMMA ID

    R_PAR  shift, and go to state 164
    COMMA  shift, and go to state 165


State 157

   56 methodcall: D_DOT ID L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 166
    COMMA  shift, and go to state 99


State 158

   64 indexedelem: LC_BRA expr COLON expr RC_BRA .

    $default  reduce using rule 64 (indexedelem)


State 159

   52 call: L_PAR funcdef R_PAR L_PAR elist R_PAR .

    $default  reduce using rule 52 (call)


State 160

   85 ifstmt: IF L_PAR expr R_PAR stmt ELSE . stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 167
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 161

   89 whilestmt: WHILE $@6 L_PAR $@7 expr R_PAR . $@8 stmt

    $default  reduce using rule 88 ($@8)

    $@8  go to state 168


State 162

   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI . expr SEMI elist R_PAR $@11 stmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 169
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 163

   74 funcdef: FUNC ID $@4 L_PAR $@5 idlist . R_PAR block
   82 idlist: idlist . COMMA ID

    R_PAR  shift, and go to state 170
    COMMA  shift, and go to state 165


State 164

   71 funcdef: FUNC $@2 L_PAR $@3 idlist R_PAR . block

    LC_BRA  shift, and go to state 22

    block  go to state 171


State 165

   82 idlist: idlist COMMA . ID

    ID  shift, and go to state 172


State 166

   56 methodcall: D_DOT ID L_PAR elist R_PAR .

    $default  reduce using rule 56 (methodcall)


State 167

   85 ifstmt: IF L_PAR expr R_PAR stmt ELSE stmt .

    $default  reduce using rule 85 (ifstmt)


State 168

   89 whilestmt: WHILE $@6 L_PAR $@7 expr R_PAR $@8 . stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 173
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 169

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr . SEMI elist R_PAR $@11 stmt

    OR          shift, and go to state 69
    AND         shift, and go to state 70
    EQ          shift, and go to state 71
    NOT_EQ      shift, and go to state 72
    GREATER     shift, and go to state 73
    GREATER_EQ  shift, and go to state 74
    LESS        shift, and go to state 75
    LESS_EQ     shift, and go to state 76
    PLUS        shift, and go to state 77
    MINUS       shift, and go to state 78
    MUL         shift, and go to state 79
    DIV         shift, and go to state 80
    MOD         shift, and go to state 81
    SEMI        shift, and go to state 174


State 170

   74 funcdef: FUNC ID $@4 L_PAR $@5 idlist R_PAR . block

    LC_BRA  shift, and go to state 22

    block  go to state 175


State 171

   71 funcdef: FUNC $@2 L_PAR $@3 idlist R_PAR block .

    $default  reduce using rule 71 (funcdef)


State 172

   82 idlist: idlist COMMA ID .

    $default  reduce using rule 82 (idlist)


State 173

   89 whilestmt: WHILE $@6 L_PAR $@7 expr R_PAR $@8 stmt .

    $default  reduce using rule 89 (whilestmt)


State 174

   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr SEMI . elist R_PAR $@11 stmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 176
    objectdef   go to state 34
    const       go to state 37


State 175

   74 funcdef: FUNC ID $@4 L_PAR $@5 idlist R_PAR block .

    $default  reduce using rule 74 (funcdef)


State 176

   58 elist: elist . COMMA expr
   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr SEMI elist . R_PAR $@11 stmt

    R_PAR  shift, and go to state 177
    COMMA  shift, and go to state 99


State 177

   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr SEMI elist R_PAR . $@11 stmt

    $default  reduce using rule 92 ($@11)

    $@11  go to state 178


State 178

   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr SEMI elist R_PAR $@11 . stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 179
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 179

   93 forstmt: FOR $@9 L_PAR $@10 elist SEMI expr SEMI elist R_PAR $@11 stmt .

    $default  reduce using rule 93 (forstmt)
