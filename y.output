Nonterminals useless in grammar

    stmts


Rules useless in grammar

  104 stmts: stmts stmt
  105      | stmt


State 101 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMI
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMI
    9     | CONTINUE SEMI
   10     | block
   11     | funcdef
   12     | SEMI

   13 expr: assignexpr
   14     | expr PLUS expr
   15     | expr MINUS expr
   16     | expr MUL expr
   17     | expr DIV expr
   18     | expr MOD expr
   19     | expr GREATER expr
   20     | expr GREATER_EQ expr
   21     | expr LESS expr
   22     | expr LESS_EQ expr
   23     | expr EQ expr
   24     | expr NOT_EQ expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: L_PAR expr R_PAR
   29     | UMINUS expr
   30     | NOT expr
   31     | D_PLUS lvalue
   32     | lvalue D_PLUS
   33     | D_MINUS lvalue
   34     | lvalue D_MINUS
   35     | primary

   36 assignexpr: lvalue ASSIGN expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | L_PAR funcdef R_PAR
   41        | const

   42 lvalue: ID
   43       | LOCAL ID
   44       | D_COLON ID
   45       | member

   46 member: lvalue DOT ID
   47       | lvalue L_BRA expr R_BRA
   48       | call DOT ID
   49       | call L_BRA expr R_BRA

   50 call: call L_PAR elist R_PAR
   51     | lvalue callsuffix
   52     | L_PAR funcdef R_PAR L_PAR elist R_PAR

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: L_PAR elist R_PAR

   56 methodcall: D_DOT ID L_PAR elist R_PAR

   57 elist: expr
   58      | elist COMMA expr
   59      | %empty

   60 objectdef: L_BRA elist R_BRA
   61          | L_BRA indexed R_BRA

   62 indexed: indexedelem
   63        | indexed COMMA indexedelem

   64 indexedelem: LC_BRA expr COLON expr RC_BRA

   65 rec_stmt: rec_stmt stmt
   66         | %empty

   67 $@1: %empty

   68 block: LC_BRA $@1 rec_stmt RC_BRA

   69 funcname: ID
   70         | %empty

   71 funcprefix: FUNC funcname

   72 funcargs: L_PAR idlist R_PAR

   73 funcbody: block

   74 funcblockstart: %empty

   75 funcblockend: %empty

   76 funcdef: funcprefix funcargs funcblockstart funcbody funcblockend

   77 const: INT
   78      | REAL
   79      | STRING
   80      | NIL
   81      | TRUE
   82      | FALSE

   83 idlist: ID
   84       | idlist COMMA ID
   85       | %empty

   86 ifprefix: IF L_PAR expr R_PAR

   87 elseprefix: ELSE

   88 ifstmt: ifprefix stmt
   89       | ifprefix stmt elseprefix stmt

   90 whilestart: WHILE

   91 whilecond: L_PAR expr R_PAR loopstmt

   92 loopstart: %empty

   93 loopend: %empty

   94 loopstmt: loopstart stmt loopend

   95 whilestmt: whilestart whilecond loopstmt

   96 N: %empty

   97 M: %empty

   98 $@2: %empty

   99 forprefix: FOR $@2 L_PAR elist SEMI M expr SEMI

  100 $@3: %empty

  101 forstmt: forprefix N elist R_PAR N stmt $@3 N

  102 returnstmt: RETURN SEMI
  103           | RETURN expr SEMI


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ASSIGN <strval> (258) 36
    OR <strval> (259) 26
    AND <strval> (260) 25
    EQ <strval> (261) 23
    NOT_EQ <strval> (262) 24
    GREATER <strval> (263) 19
    GREATER_EQ <strval> (264) 20
    LESS <strval> (265) 21
    LESS_EQ <strval> (266) 22
    PLUS <strval> (267) 14
    MINUS <strval> (268) 15
    MUL <strval> (269) 16
    DIV <strval> (270) 17
    MOD <strval> (271) 18
    NOT (272) 30
    D_PLUS <strval> (273) 31 32
    D_MINUS <strval> (274) 33 34
    UMINUS <strval> (275) 29
    DOT <strval> (276) 46 48
    D_DOT <strval> (277) 56
    L_BRA <strval> (278) 47 49 60 61
    R_BRA <strval> (279) 47 49 60 61
    L_PAR <strval> (280) 28 40 50 52 55 56 72 86 91 99
    R_PAR <strval> (281) 28 40 50 52 55 56 72 86 91 101
    INT <intval> (282) 77
    REAL <floatval> (283) 78
    ID <strval> (284) 42 43 44 46 48 56 69 83 84
    STRING <strval> (285) 79
    IF <strval> (286) 86
    ELSE <strval> (287) 87
    WHILE <strval> (288) 90
    FOR <strval> (289) 99
    FUNC <strval> (290) 71
    RETURN <strval> (291) 102 103
    BREAK <strval> (292) 8
    CONTINUE <strval> (293) 9
    LOCAL <strval> (294) 43
    TRUE <strval> (295) 81
    FALSE <strval> (296) 82
    NIL <strval> (297) 80
    LC_BRA <strval> (298) 64 68
    RC_BRA <strval> (299) 64 68
    SEMI <strval> (300) 3 8 9 12 99 102 103
    COMMA <strval> (301) 58 63 84
    COLON <strval> (302) 64
    D_COLON <strval> (303) 44


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt <stmtval> (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 65 88 89 94 101
    expr <intval> (52)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 47 49 57 58 64 86 91 99 103
    term <strval> (53)
        on left: 28 29 30 31 32 33 34 35
        on right: 27
    assignexpr <intval> (54)
        on left: 36
        on right: 13
    primary <strval> (55)
        on left: 37 38 39 40 41
        on right: 35
    lvalue <strval> (56)
        on left: 42 43 44 45
        on right: 31 32 33 34 36 37 46 47 51
    member <strval> (57)
        on left: 46 47 48 49
        on right: 45
    call <strval> (58)
        on left: 50 51 52
        on right: 38 48 49 50
    callsuffix <strval> (59)
        on left: 53 54
        on right: 51
    normcall <strval> (60)
        on left: 55
        on right: 53
    methodcall (61)
        on left: 56
        on right: 54
    elist <strval> (62)
        on left: 57 58 59
        on right: 50 52 55 56 58 60 99 101
    objectdef <strval> (63)
        on left: 60 61
        on right: 39
    indexed <strval> (64)
        on left: 62 63
        on right: 61 63
    indexedelem <strval> (65)
        on left: 64
        on right: 62 63
    rec_stmt <strval> (66)
        on left: 65 66
        on right: 65 68
    block <strval> (67)
        on left: 68
        on right: 10 73
    $@1 (68)
        on left: 67
        on right: 68
    funcname <strval> (69)
        on left: 69 70
        on right: 71
    funcprefix <strval> (70)
        on left: 71
        on right: 76
    funcargs <strval> (71)
        on left: 72
        on right: 76
    funcbody <strval> (72)
        on left: 73
        on right: 76
    funcblockstart <strval> (73)
        on left: 74
        on right: 76
    funcblockend <strval> (74)
        on left: 75
        on right: 76
    funcdef <strval> (75)
        on left: 76
        on right: 11 40 52
    const <strval> (76)
        on left: 77 78 79 80 81 82
        on right: 41
    idlist <strval> (77)
        on left: 83 84 85
        on right: 72 84
    ifprefix <strval> (78)
        on left: 86
        on right: 88 89
    elseprefix <strval> (79)
        on left: 87
        on right: 89
    ifstmt <stmtval> (80)
        on left: 88 89
        on right: 4
    whilestart <strval> (81)
        on left: 90
        on right: 95
    whilecond <strval> (82)
        on left: 91
        on right: 95
    loopstart (83)
        on left: 92
        on right: 94
    loopend (84)
        on left: 93
        on right: 94
    loopstmt <stmtval> (85)
        on left: 94
        on right: 91 95
    whilestmt <stmtval> (86)
        on left: 95
        on right: 5
    N <intval> (87)
        on left: 96
        on right: 101
    M <intval> (88)
        on left: 97
        on right: 99
    forprefix <strval> (89)
        on left: 99
        on right: 101
    $@2 (90)
        on left: 98
        on right: 99
    forstmt <stmtval> (91)
        on left: 101
        on right: 6
    $@3 (92)
        on left: 100
        on right: 101
    returnstmt <stmtval> (93)
        on left: 102 103
        on right: 7


State 0

    0 $accept: . program $end

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 1

   30 term: NOT . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 2

   31 term: D_PLUS . lvalue

    L_PAR    shift, and go to state 47
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 48
    member  go to state 32
    call    go to state 49


State 3

   33 term: D_MINUS . lvalue

    L_PAR    shift, and go to state 47
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 50
    member  go to state 32
    call    go to state 49


State 4

   29 term: UMINUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 5

   60 objectdef: L_BRA . elist R_BRA
   61          | L_BRA . indexed R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    LC_BRA   shift, and go to state 52
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr         go to state 53
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 54
    objectdef    go to state 34
    indexed      go to state 55
    indexedelem  go to state 56
    const        go to state 38


State 6

   28 term: L_PAR . expr R_PAR
   40 primary: L_PAR . funcdef R_PAR
   52 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    FUNC     shift, and go to state 14
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 57
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcprefix  go to state 36
    funcdef     go to state 58
    const       go to state 38


State 7

   77 const: INT .

    $default  reduce using rule 77 (const)


State 8

   78 const: REAL .

    $default  reduce using rule 78 (const)


State 9

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


State 10

   79 const: STRING .

    $default  reduce using rule 79 (const)


State 11

   86 ifprefix: IF . L_PAR expr R_PAR

    L_PAR  shift, and go to state 59


State 12

   90 whilestart: WHILE .

    $default  reduce using rule 90 (whilestart)


State 13

   99 forprefix: FOR . $@2 L_PAR elist SEMI M expr SEMI

    $default  reduce using rule 98 ($@2)

    $@2  go to state 60


State 14

   71 funcprefix: FUNC . funcname

    ID  shift, and go to state 61

    $default  reduce using rule 70 (funcname)

    funcname  go to state 62


State 15

  102 returnstmt: RETURN . SEMI
  103           | RETURN . expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    SEMI     shift, and go to state 63
    D_COLON  shift, and go to state 24

    expr        go to state 64
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 16

    8 stmt: BREAK . SEMI

    SEMI  shift, and go to state 65


State 17

    9 stmt: CONTINUE . SEMI

    SEMI  shift, and go to state 66


State 18

   43 lvalue: LOCAL . ID

    ID  shift, and go to state 67


State 19

   81 const: TRUE .

    $default  reduce using rule 81 (const)


State 20

   82 const: FALSE .

    $default  reduce using rule 82 (const)


State 21

   80 const: NIL .

    $default  reduce using rule 80 (const)


State 22

   68 block: LC_BRA . $@1 rec_stmt RC_BRA

    $default  reduce using rule 67 ($@1)

    $@1  go to state 68


State 23

   12 stmt: SEMI .

    $default  reduce using rule 12 (stmt)


State 24

   44 lvalue: D_COLON . ID

    ID  shift, and go to state 69


State 25

    0 $accept: program . $end

    $end  shift, and go to state 70


State 26

    1 program: stmt . program

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 71
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 27

    3 stmt: expr . SEMI
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    SEMI        shift, and go to state 85


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . D_PLUS
   34     | lvalue . D_MINUS
   36 assignexpr: lvalue . ASSIGN expr
   37 primary: lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    ASSIGN   shift, and go to state 86
    D_PLUS   shift, and go to state 87
    D_MINUS  shift, and go to state 88
    DOT      shift, and go to state 89
    D_DOT    shift, and go to state 90
    L_BRA    shift, and go to state 91
    L_PAR    shift, and go to state 92

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 33

   38 primary: call .
   48 member: call . DOT ID
   49       | call . L_BRA expr R_BRA
   50 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 96
    L_BRA  shift, and go to state 97
    L_PAR  shift, and go to state 98

    $default  reduce using rule 38 (primary)


State 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   76 funcdef: funcprefix . funcargs funcblockstart funcbody funcblockend

    L_PAR  shift, and go to state 99

    funcargs  go to state 100


State 37

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 38

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 39

   88 ifstmt: ifprefix . stmt
   89       | ifprefix . stmt elseprefix stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 101
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 40

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 41

   95 whilestmt: whilestart . whilecond loopstmt

    L_PAR  shift, and go to state 102

    whilecond  go to state 103


State 42

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 43

  101 forstmt: forprefix . N elist R_PAR N stmt $@3 N

    $default  reduce using rule 96 (N)

    N  go to state 104


State 44

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 45

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 46

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 47

   52 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    FUNC  shift, and go to state 14

    funcprefix  go to state 36
    funcdef     go to state 105


State 48

   31 term: D_PLUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    DOT    shift, and go to state 89
    D_DOT  shift, and go to state 90
    L_BRA  shift, and go to state 91
    L_PAR  shift, and go to state 92

    $default  reduce using rule 31 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 49

   48 member: call . DOT ID
   49       | call . L_BRA expr R_BRA
   50 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 96
    L_BRA  shift, and go to state 97
    L_PAR  shift, and go to state 98


State 50

   33 term: D_MINUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    DOT    shift, and go to state 89
    D_DOT  shift, and go to state 90
    L_BRA  shift, and go to state 91
    L_PAR  shift, and go to state 92

    $default  reduce using rule 33 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 51

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: UMINUS expr .

    $default  reduce using rule 29 (term)


State 52

   64 indexedelem: LC_BRA . expr COLON expr RC_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 106
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 53

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   57 elist: expr .

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 57 (elist)


State 54

   58 elist: elist . COMMA expr
   60 objectdef: L_BRA elist . R_BRA

    R_BRA  shift, and go to state 107
    COMMA  shift, and go to state 108


State 55

   61 objectdef: L_BRA indexed . R_BRA
   63 indexed: indexed . COMMA indexedelem

    R_BRA  shift, and go to state 109
    COMMA  shift, and go to state 110


State 56

   62 indexed: indexedelem .

    $default  reduce using rule 62 (indexed)


State 57

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   28 term: L_PAR expr . R_PAR

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_PAR       shift, and go to state 111


State 58

   40 primary: L_PAR funcdef . R_PAR
   52 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 112


State 59

   86 ifprefix: IF L_PAR . expr R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 113
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 60

   99 forprefix: FOR $@2 . L_PAR elist SEMI M expr SEMI

    L_PAR  shift, and go to state 114


State 61

   69 funcname: ID .

    $default  reduce using rule 69 (funcname)


State 62

   71 funcprefix: FUNC funcname .

    $default  reduce using rule 71 (funcprefix)


State 63

  102 returnstmt: RETURN SEMI .

    $default  reduce using rule 102 (returnstmt)


State 64

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
  103 returnstmt: RETURN expr . SEMI

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    SEMI        shift, and go to state 115


State 65

    8 stmt: BREAK SEMI .

    $default  reduce using rule 8 (stmt)


State 66

    9 stmt: CONTINUE SEMI .

    $default  reduce using rule 9 (stmt)


State 67

   43 lvalue: LOCAL ID .

    $default  reduce using rule 43 (lvalue)


State 68

   68 block: LC_BRA $@1 . rec_stmt RC_BRA

    $default  reduce using rule 66 (rec_stmt)

    rec_stmt  go to state 116


State 69

   44 lvalue: D_COLON ID .

    $default  reduce using rule 44 (lvalue)


State 70

    0 $accept: program $end .

    $default  accept


State 71

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 72

   26 expr: expr OR . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 73

   25 expr: expr AND . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 74

   23 expr: expr EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 75

   24 expr: expr NOT_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 76

   19 expr: expr GREATER . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 77

   20 expr: expr GREATER_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 78

   21 expr: expr LESS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 79

   22 expr: expr LESS_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 80

   14 expr: expr PLUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 81

   15 expr: expr MINUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 82

   16 expr: expr MUL . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 83

   17 expr: expr DIV . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 128
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 84

   18 expr: expr MOD . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 129
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 85

    3 stmt: expr SEMI .

    $default  reduce using rule 3 (stmt)


State 86

   36 assignexpr: lvalue ASSIGN . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 130
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 87

   32 term: lvalue D_PLUS .

    $default  reduce using rule 32 (term)


State 88

   34 term: lvalue D_MINUS .

    $default  reduce using rule 34 (term)


State 89

   46 member: lvalue DOT . ID

    ID  shift, and go to state 131


State 90

   56 methodcall: D_DOT . ID L_PAR elist R_PAR

    ID  shift, and go to state 132


State 91

   47 member: lvalue L_BRA . expr R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 92

   55 normcall: L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 134
    objectdef   go to state 34
    const       go to state 38


State 93

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


State 94

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


State 95

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


State 96

   48 member: call DOT . ID

    ID  shift, and go to state 135


State 97

   49 member: call L_BRA . expr R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 136
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 98

   50 call: call L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 137
    objectdef   go to state 34
    const       go to state 38


State 99

   72 funcargs: L_PAR . idlist R_PAR

    ID  shift, and go to state 138

    $default  reduce using rule 85 (idlist)

    idlist  go to state 139


State 100

   76 funcdef: funcprefix funcargs . funcblockstart funcbody funcblockend

    $default  reduce using rule 74 (funcblockstart)

    funcblockstart  go to state 140


State 101

   88 ifstmt: ifprefix stmt .
   89       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 141

    ELSE      [reduce using rule 88 (ifstmt)]
    $default  reduce using rule 88 (ifstmt)

    elseprefix  go to state 142


State 102

   91 whilecond: L_PAR . expr R_PAR loopstmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 143
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 103

   95 whilestmt: whilestart whilecond . loopstmt

    $default  reduce using rule 92 (loopstart)

    loopstart  go to state 144
    loopstmt   go to state 145


State 104

  101 forstmt: forprefix N . elist R_PAR N stmt $@3 N

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 146
    objectdef   go to state 34
    const       go to state 38


State 105

   52 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 147


State 106

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 indexedelem: LC_BRA expr . COLON expr RC_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    COLON       shift, and go to state 148


State 107

   60 objectdef: L_BRA elist R_BRA .

    $default  reduce using rule 60 (objectdef)


State 108

   58 elist: elist COMMA . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 149
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 109

   61 objectdef: L_BRA indexed R_BRA .

    $default  reduce using rule 61 (objectdef)


State 110

   63 indexed: indexed COMMA . indexedelem

    LC_BRA  shift, and go to state 52

    indexedelem  go to state 150


State 111

   28 term: L_PAR expr R_PAR .

    $default  reduce using rule 28 (term)


State 112

   40 primary: L_PAR funcdef R_PAR .
   52 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 151

    $default  reduce using rule 40 (primary)


State 113

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   86 ifprefix: IF L_PAR expr . R_PAR

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_PAR       shift, and go to state 152


State 114

   99 forprefix: FOR $@2 L_PAR . elist SEMI M expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 153
    objectdef   go to state 34
    const       go to state 38


State 115

  103 returnstmt: RETURN expr SEMI .

    $default  reduce using rule 103 (returnstmt)


State 116

   65 rec_stmt: rec_stmt . stmt
   68 block: LC_BRA $@1 rec_stmt . RC_BRA

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    RC_BRA    shift, and go to state 154
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 155
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 117

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 26 (expr)


State 118

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 25 (expr)


State 119

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   23     | expr EQ expr .
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 120

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   24     | expr NOT_EQ expr .
   25     | expr . AND expr
   26     | expr . OR expr

    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 121

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   19     | expr GREATER expr .
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 19 (expr)


State 122

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   20     | expr GREATER_EQ expr .
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 20 (expr)


State 123

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   21     | expr LESS expr .
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 124

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   22     | expr LESS_EQ expr .
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 125

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL  shift, and go to state 82
    DIV  shift, and go to state 83
    MOD  shift, and go to state 84

    $default  reduce using rule 14 (expr)


State 126

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL  shift, and go to state 82
    DIV  shift, and go to state 83
    MOD  shift, and go to state 84

    $default  reduce using rule 15 (expr)


State 127

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   16     | expr MUL expr .
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


State 128

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   17     | expr DIV expr .
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 129

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   18     | expr MOD expr .
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 130

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue ASSIGN expr .

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 36 (assignexpr)


State 131

   46 member: lvalue DOT ID .

    $default  reduce using rule 46 (member)


State 132

   56 methodcall: D_DOT ID . L_PAR elist R_PAR

    L_PAR  shift, and go to state 156


State 133

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   47 member: lvalue L_BRA expr . R_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_BRA       shift, and go to state 157


State 134

   55 normcall: L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 158
    COMMA  shift, and go to state 108


State 135

   48 member: call DOT ID .

    $default  reduce using rule 48 (member)


State 136

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   49 member: call L_BRA expr . R_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_BRA       shift, and go to state 159


State 137

   50 call: call L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 160
    COMMA  shift, and go to state 108


State 138

   83 idlist: ID .

    $default  reduce using rule 83 (idlist)


State 139

   72 funcargs: L_PAR idlist . R_PAR
   84 idlist: idlist . COMMA ID

    R_PAR  shift, and go to state 161
    COMMA  shift, and go to state 162


State 140

   76 funcdef: funcprefix funcargs funcblockstart . funcbody funcblockend

    LC_BRA  shift, and go to state 22

    block     go to state 163
    funcbody  go to state 164


State 141

   87 elseprefix: ELSE .

    $default  reduce using rule 87 (elseprefix)


State 142

   89 ifstmt: ifprefix stmt elseprefix . stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 165
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 143

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   91 whilecond: L_PAR expr . R_PAR loopstmt

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_PAR       shift, and go to state 166


State 144

   94 loopstmt: loopstart . stmt loopend

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 167
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 145

   95 whilestmt: whilestart whilecond loopstmt .

    $default  reduce using rule 95 (whilestmt)


State 146

   58 elist: elist . COMMA expr
  101 forstmt: forprefix N elist . R_PAR N stmt $@3 N

    R_PAR  shift, and go to state 168
    COMMA  shift, and go to state 108


State 147

   52 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 151


State 148

   64 indexedelem: LC_BRA expr COLON . expr RC_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 169
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 149

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   58 elist: elist COMMA expr .

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 58 (elist)


State 150

   63 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 63 (indexed)


State 151

   52 call: L_PAR funcdef R_PAR L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 170
    objectdef   go to state 34
    const       go to state 38


State 152

   86 ifprefix: IF L_PAR expr R_PAR .

    $default  reduce using rule 86 (ifprefix)


State 153

   58 elist: elist . COMMA expr
   99 forprefix: FOR $@2 L_PAR elist . SEMI M expr SEMI

    SEMI   shift, and go to state 171
    COMMA  shift, and go to state 108


State 154

   68 block: LC_BRA $@1 rec_stmt RC_BRA .

    $default  reduce using rule 68 (block)


State 155

   65 rec_stmt: rec_stmt stmt .

    $default  reduce using rule 65 (rec_stmt)


State 156

   56 methodcall: D_DOT ID L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 172
    objectdef   go to state 34
    const       go to state 38


State 157

   47 member: lvalue L_BRA expr R_BRA .

    $default  reduce using rule 47 (member)


State 158

   55 normcall: L_PAR elist R_PAR .

    $default  reduce using rule 55 (normcall)


State 159

   49 member: call L_BRA expr R_BRA .

    $default  reduce using rule 49 (member)


State 160

   50 call: call L_PAR elist R_PAR .

    $default  reduce using rule 50 (call)


State 161

   72 funcargs: L_PAR idlist R_PAR .

    $default  reduce using rule 72 (funcargs)


State 162

   84 idlist: idlist COMMA . ID

    ID  shift, and go to state 173


State 163

   73 funcbody: block .

    $default  reduce using rule 73 (funcbody)


State 164

   76 funcdef: funcprefix funcargs funcblockstart funcbody . funcblockend

    $default  reduce using rule 75 (funcblockend)

    funcblockend  go to state 174


State 165

   89 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 89 (ifstmt)


State 166

   91 whilecond: L_PAR expr R_PAR . loopstmt

    $default  reduce using rule 92 (loopstart)

    loopstart  go to state 144
    loopstmt   go to state 175


State 167

   94 loopstmt: loopstart stmt . loopend

    $default  reduce using rule 93 (loopend)

    loopend  go to state 176


State 168

  101 forstmt: forprefix N elist R_PAR . N stmt $@3 N

    $default  reduce using rule 96 (N)

    N  go to state 177


State 169

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 indexedelem: LC_BRA expr COLON expr . RC_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    RC_BRA      shift, and go to state 178


State 170

   52 call: L_PAR funcdef R_PAR L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 179
    COMMA  shift, and go to state 108


State 171

   99 forprefix: FOR $@2 L_PAR elist SEMI . M expr SEMI

    $default  reduce using rule 97 (M)

    M  go to state 180


State 172

   56 methodcall: D_DOT ID L_PAR elist . R_PAR
   58 elist: elist . COMMA expr

    R_PAR  shift, and go to state 181
    COMMA  shift, and go to state 108


State 173

   84 idlist: idlist COMMA ID .

    $default  reduce using rule 84 (idlist)


State 174

   76 funcdef: funcprefix funcargs funcblockstart funcbody funcblockend .

    $default  reduce using rule 76 (funcdef)


State 175

   91 whilecond: L_PAR expr R_PAR loopstmt .

    $default  reduce using rule 91 (whilecond)


State 176

   94 loopstmt: loopstart stmt loopend .

    $default  reduce using rule 94 (loopstmt)


State 177

  101 forstmt: forprefix N elist R_PAR N . stmt $@3 N

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 182
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 178

   64 indexedelem: LC_BRA expr COLON expr RC_BRA .

    $default  reduce using rule 64 (indexedelem)


State 179

   52 call: L_PAR funcdef R_PAR L_PAR elist R_PAR .

    $default  reduce using rule 52 (call)


State 180

   99 forprefix: FOR $@2 L_PAR elist SEMI M . expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 183
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 181

   56 methodcall: D_DOT ID L_PAR elist R_PAR .

    $default  reduce using rule 56 (methodcall)


State 182

  101 forstmt: forprefix N elist R_PAR N stmt . $@3 N

    $default  reduce using rule 100 ($@3)

    $@3  go to state 184


State 183

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   99 forprefix: FOR $@2 L_PAR elist SEMI M expr . SEMI

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    SEMI        shift, and go to state 185


State 184

  101 forstmt: forprefix N elist R_PAR N stmt $@3 . N

    $default  reduce using rule 96 (N)

    N  go to state 186


State 185

   99 forprefix: FOR $@2 L_PAR elist SEMI M expr SEMI .

    $default  reduce using rule 99 (forprefix)


State 186

  101 forstmt: forprefix N elist R_PAR N stmt $@3 N .

    $default  reduce using rule 101 (forstmt)
