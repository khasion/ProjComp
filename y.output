Nonterminals useless in grammar

   stmts


Rules useless in grammar

  107 stmts: stmts stmt
  108      | stmt


State 101 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMI
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | break SEMI
    9     | continue SEMI
   10     | block
   11     | funcdef
   12     | SEMI

   13 expr: assignexpr
   14     | expr PLUS expr
   15     | expr MINUS expr
   16     | expr MUL expr
   17     | expr DIV expr
   18     | expr MOD expr
   19     | expr GREATER expr
   20     | expr GREATER_EQ expr
   21     | expr LESS expr
   22     | expr LESS_EQ expr
   23     | expr EQ expr
   24     | expr NOT_EQ expr
   25     | expr AND M expr
   26     | expr OR M expr
   27     | term

   28 term: L_PAR expr R_PAR
   29     | UMINUS expr
   30     | NOT expr
   31     | D_PLUS lvalue
   32     | lvalue D_PLUS
   33     | D_MINUS lvalue
   34     | lvalue D_MINUS
   35     | primary

   36 assignexpr: lvalue ASSIGN expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | L_PAR funcdef R_PAR
   41        | const

   42 lvalue: ID
   43       | LOCAL ID
   44       | D_COLON ID
   45       | member

   46 member: lvalue DOT ID
   47       | lvalue L_BRA expr R_BRA
   48       | call DOT ID
   49       | call L_BRA expr R_BRA

   50 call: call L_PAR elist R_PAR
   51     | lvalue callsuffix
   52     | L_PAR funcdef R_PAR L_PAR elist R_PAR

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: L_PAR elist R_PAR

   56 methodcall: D_DOT ID L_PAR elist R_PAR

   57 elist: expr comma_elist
   58      | %empty

   59 comma_elist: COMMA expr comma_elist
   60            | %empty

   61 objectdef: L_BRA elist R_BRA
   62          | L_BRA indexed R_BRA

   63 indexed: indexedelem
   64        | indexed COMMA indexedelem

   65 indexedelem: LC_BRA expr COLON expr RC_BRA

   66 rec_stmt: rec_stmt stmt
   67         | %empty

   68 $@1: %empty

   69 block: LC_BRA $@1 rec_stmt RC_BRA

   70 funcname: ID
   71         | %empty

   72 funcprefix: FUNC funcname

   73 funcargs: L_PAR idlist R_PAR

   74 funcbody: block

   75 funcblockstart: %empty

   76 funcblockend: %empty

   77 funcdef: funcprefix funcargs funcblockstart funcbody funcblockend

   78 const: INT
   79      | REAL
   80      | STRING
   81      | NIL
   82      | TRUE
   83      | FALSE

   84 idlist: ID
   85       | idlist COMMA ID
   86       | %empty

   87 ifprefix: IF L_PAR expr R_PAR

   88 elseprefix: ELSE

   89 ifstmt: ifprefix stmt
   90       | ifprefix stmt elseprefix stmt

   91 whilestart: WHILE

   92 whilecond: L_PAR expr R_PAR

   93 whilestmt: whilestart whilecond stmt loopstmt

   94 loopstart: %empty

   95 loopend: %empty

   96 loopstmt: loopstart stmt loopend

   97 N: %empty

   98 M: %empty

   99 $@2: %empty

  100 forprefix: FOR $@2 L_PAR elist SEMI M expr SEMI

  101 $@3: %empty

  102 forstmt: forprefix N elist R_PAR N stmt $@3 N loopstmt

  103 break: BREAK

  104 continue: CONTINUE

  105 returnstmt: RETURN SEMI
  106           | RETURN expr SEMI


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ASSIGN <strval> (258) 36
    OR <strval> (259) 26
    AND <strval> (260) 25
    EQ <strval> (261) 23
    NOT_EQ <strval> (262) 24
    GREATER <strval> (263) 19
    GREATER_EQ <strval> (264) 20
    LESS <strval> (265) 21
    LESS_EQ <strval> (266) 22
    PLUS <strval> (267) 14
    MINUS <strval> (268) 15
    MUL <strval> (269) 16
    DIV <strval> (270) 17
    MOD <strval> (271) 18
    NOT (272) 30
    D_PLUS <strval> (273) 31 32
    D_MINUS <strval> (274) 33 34
    UMINUS <strval> (275) 29
    DOT <strval> (276) 46 48
    D_DOT <strval> (277) 56
    L_BRA <strval> (278) 47 49 61 62
    R_BRA <strval> (279) 47 49 61 62
    L_PAR <strval> (280) 28 40 50 52 55 56 73 87 92 100
    R_PAR <strval> (281) 28 40 50 52 55 56 73 87 92 102
    INT <intval> (282) 78
    REAL <floatval> (283) 79
    ID <strval> (284) 42 43 44 46 48 56 70 84 85
    STRING <strval> (285) 80
    IF <strval> (286) 87
    ELSE <strval> (287) 88
    WHILE <strval> (288) 91
    FOR <strval> (289) 100
    FUNC <strval> (290) 72
    RETURN <strval> (291) 105 106
    BREAK <strval> (292) 103
    CONTINUE <strval> (293) 104
    LOCAL <strval> (294) 43
    TRUE <strval> (295) 82
    FALSE <strval> (296) 83
    NIL <strval> (297) 81
    LC_BRA <strval> (298) 65 69
    RC_BRA <strval> (299) 65 69
    SEMI <strval> (300) 3 8 9 12 100 105 106
    COMMA <strval> (301) 59 64 85
    COLON <strval> (302) 65
    D_COLON <strval> (303) 44


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1
stmt (51)
    on left: 3 4 5 6 7 8 9 10 11 12, on right: 1 66 89 90 93 96 102
expr (52)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 47 49 57 59
    65 87 92 100 106
term (53)
    on left: 28 29 30 31 32 33 34 35, on right: 27
assignexpr (54)
    on left: 36, on right: 13
primary (55)
    on left: 37 38 39 40 41, on right: 35
lvalue (56)
    on left: 42 43 44 45, on right: 31 32 33 34 36 37 46 47 51
member (57)
    on left: 46 47 48 49, on right: 45
call (58)
    on left: 50 51 52, on right: 38 48 49 50
callsuffix (59)
    on left: 53 54, on right: 51
normcall (60)
    on left: 55, on right: 53
methodcall (61)
    on left: 56, on right: 54
elist (62)
    on left: 57 58, on right: 50 52 55 56 61 100 102
comma_elist (63)
    on left: 59 60, on right: 57 59
objectdef (64)
    on left: 61 62, on right: 39
indexed (65)
    on left: 63 64, on right: 62 64
indexedelem (66)
    on left: 65, on right: 63 64
rec_stmt (67)
    on left: 66 67, on right: 66 69
block (68)
    on left: 69, on right: 10 74
$@1 (69)
    on left: 68, on right: 69
funcname (70)
    on left: 70 71, on right: 72
funcprefix (71)
    on left: 72, on right: 77
funcargs (72)
    on left: 73, on right: 77
funcbody (73)
    on left: 74, on right: 77
funcblockstart (74)
    on left: 75, on right: 77
funcblockend (75)
    on left: 76, on right: 77
funcdef (76)
    on left: 77, on right: 11 40 52
const (77)
    on left: 78 79 80 81 82 83, on right: 41
idlist (78)
    on left: 84 85 86, on right: 73 85
ifprefix (79)
    on left: 87, on right: 89 90
elseprefix (80)
    on left: 88, on right: 90
ifstmt (81)
    on left: 89 90, on right: 4
whilestart (82)
    on left: 91, on right: 93
whilecond (83)
    on left: 92, on right: 93
whilestmt (84)
    on left: 93, on right: 5
loopstart (85)
    on left: 94, on right: 96
loopend (86)
    on left: 95, on right: 96
loopstmt (87)
    on left: 96, on right: 93 102
N (88)
    on left: 97, on right: 102
M (89)
    on left: 98, on right: 25 26 100
forprefix (90)
    on left: 100, on right: 102
$@2 (91)
    on left: 99, on right: 100
forstmt (92)
    on left: 102, on right: 6
$@3 (93)
    on left: 101, on right: 102
break (94)
    on left: 103, on right: 8
continue (95)
    on left: 104, on right: 9
returnstmt (96)
    on left: 105 106, on right: 7


State 0

    0 $accept: . program $end

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 1

   30 term: NOT . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 48
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 2

   31 term: D_PLUS . lvalue

    L_PAR    shift, and go to state 49
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 50
    member  go to state 32
    call    go to state 51


State 3

   33 term: D_MINUS . lvalue

    L_PAR    shift, and go to state 49
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 52
    member  go to state 32
    call    go to state 51


State 4

   29 term: UMINUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 5

   61 objectdef: L_BRA . elist R_BRA
   62          | L_BRA . indexed R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    LC_BRA   shift, and go to state 54
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr         go to state 55
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 56
    objectdef    go to state 34
    indexed      go to state 57
    indexedelem  go to state 58
    const        go to state 38


State 6

   28 term: L_PAR . expr R_PAR
   40 primary: L_PAR . funcdef R_PAR
   52 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    FUNC     shift, and go to state 14
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 59
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcprefix  go to state 36
    funcdef     go to state 60
    const       go to state 38


State 7

   78 const: INT .

    $default  reduce using rule 78 (const)


State 8

   79 const: REAL .

    $default  reduce using rule 79 (const)


State 9

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


State 10

   80 const: STRING .

    $default  reduce using rule 80 (const)


State 11

   87 ifprefix: IF . L_PAR expr R_PAR

    L_PAR  shift, and go to state 61


State 12

   91 whilestart: WHILE .

    $default  reduce using rule 91 (whilestart)


State 13

  100 forprefix: FOR . $@2 L_PAR elist SEMI M expr SEMI

    $default  reduce using rule 99 ($@2)

    $@2  go to state 62


State 14

   72 funcprefix: FUNC . funcname

    ID  shift, and go to state 63

    $default  reduce using rule 71 (funcname)

    funcname  go to state 64


State 15

  105 returnstmt: RETURN . SEMI
  106           | RETURN . expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    SEMI     shift, and go to state 65
    D_COLON  shift, and go to state 24

    expr        go to state 66
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 16

  103 break: BREAK .

    $default  reduce using rule 103 (break)


State 17

  104 continue: CONTINUE .

    $default  reduce using rule 104 (continue)


State 18

   43 lvalue: LOCAL . ID

    ID  shift, and go to state 67


State 19

   82 const: TRUE .

    $default  reduce using rule 82 (const)


State 20

   83 const: FALSE .

    $default  reduce using rule 83 (const)


State 21

   81 const: NIL .

    $default  reduce using rule 81 (const)


State 22

   69 block: LC_BRA . $@1 rec_stmt RC_BRA

    $default  reduce using rule 68 ($@1)

    $@1  go to state 68


State 23

   12 stmt: SEMI .

    $default  reduce using rule 12 (stmt)


State 24

   44 lvalue: D_COLON . ID

    ID  shift, and go to state 69


State 25

    0 $accept: program . $end

    $end  shift, and go to state 70


State 26

    1 program: stmt . program

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 71
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 27

    3 stmt: expr . SEMI
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    SEMI        shift, and go to state 85


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . D_PLUS
   34     | lvalue . D_MINUS
   36 assignexpr: lvalue . ASSIGN expr
   37 primary: lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    ASSIGN   shift, and go to state 86
    D_PLUS   shift, and go to state 87
    D_MINUS  shift, and go to state 88
    DOT      shift, and go to state 89
    D_DOT    shift, and go to state 90
    L_BRA    shift, and go to state 91
    L_PAR    shift, and go to state 92

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 33

   38 primary: call .
   48 member: call . DOT ID
   49       | call . L_BRA expr R_BRA
   50 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 96
    L_BRA  shift, and go to state 97
    L_PAR  shift, and go to state 98

    $default  reduce using rule 38 (primary)


State 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   77 funcdef: funcprefix . funcargs funcblockstart funcbody funcblockend

    L_PAR  shift, and go to state 99

    funcargs  go to state 100


State 37

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 38

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 39

   89 ifstmt: ifprefix . stmt
   90       | ifprefix . stmt elseprefix stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 101
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 40

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 41

   93 whilestmt: whilestart . whilecond stmt loopstmt

    L_PAR  shift, and go to state 102

    whilecond  go to state 103


State 42

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 43

  102 forstmt: forprefix . N elist R_PAR N stmt $@3 N loopstmt

    $default  reduce using rule 97 (N)

    N  go to state 104


State 44

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 45

    8 stmt: break . SEMI

    SEMI  shift, and go to state 105


State 46

    9 stmt: continue . SEMI

    SEMI  shift, and go to state 106


State 47

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 48

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 49

   52 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    FUNC  shift, and go to state 14

    funcprefix  go to state 36
    funcdef     go to state 107


State 50

   31 term: D_PLUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    DOT    shift, and go to state 89
    D_DOT  shift, and go to state 90
    L_BRA  shift, and go to state 91
    L_PAR  shift, and go to state 92

    $default  reduce using rule 31 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 51

   48 member: call . DOT ID
   49       | call . L_BRA expr R_BRA
   50 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 96
    L_BRA  shift, and go to state 97
    L_PAR  shift, and go to state 98


State 52

   33 term: D_MINUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRA expr R_BRA
   51 call: lvalue . callsuffix

    DOT    shift, and go to state 89
    D_DOT  shift, and go to state 90
    L_BRA  shift, and go to state 91
    L_PAR  shift, and go to state 92

    $default  reduce using rule 33 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 53

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   29 term: UMINUS expr .

    $default  reduce using rule 29 (term)


State 54

   65 indexedelem: LC_BRA . expr COLON expr RC_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 108
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 55

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   57 elist: expr . comma_elist

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    COMMA       shift, and go to state 109

    $default  reduce using rule 60 (comma_elist)

    comma_elist  go to state 110


State 56

   61 objectdef: L_BRA elist . R_BRA

    R_BRA  shift, and go to state 111


State 57

   62 objectdef: L_BRA indexed . R_BRA
   64 indexed: indexed . COMMA indexedelem

    R_BRA  shift, and go to state 112
    COMMA  shift, and go to state 113


State 58

   63 indexed: indexedelem .

    $default  reduce using rule 63 (indexed)


State 59

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   28 term: L_PAR expr . R_PAR

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_PAR       shift, and go to state 114


State 60

   40 primary: L_PAR funcdef . R_PAR
   52 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 115


State 61

   87 ifprefix: IF L_PAR . expr R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 62

  100 forprefix: FOR $@2 . L_PAR elist SEMI M expr SEMI

    L_PAR  shift, and go to state 117


State 63

   70 funcname: ID .

    $default  reduce using rule 70 (funcname)


State 64

   72 funcprefix: FUNC funcname .

    $default  reduce using rule 72 (funcprefix)


State 65

  105 returnstmt: RETURN SEMI .

    $default  reduce using rule 105 (returnstmt)


State 66

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
  106 returnstmt: RETURN expr . SEMI

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    SEMI        shift, and go to state 118


State 67

   43 lvalue: LOCAL ID .

    $default  reduce using rule 43 (lvalue)


State 68

   69 block: LC_BRA $@1 . rec_stmt RC_BRA

    $default  reduce using rule 67 (rec_stmt)

    rec_stmt  go to state 119


State 69

   44 lvalue: D_COLON ID .

    $default  reduce using rule 44 (lvalue)


State 70

    0 $accept: program $end .

    $default  accept


State 71

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 72

   26 expr: expr OR . M expr

    $default  reduce using rule 98 (M)

    M  go to state 120


State 73

   25 expr: expr AND . M expr

    $default  reduce using rule 98 (M)

    M  go to state 121


State 74

   23 expr: expr EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 75

   24 expr: expr NOT_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 76

   19 expr: expr GREATER . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 77

   20 expr: expr GREATER_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 78

   21 expr: expr LESS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 79

   22 expr: expr LESS_EQ . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 80

   14 expr: expr PLUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 128
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 81

   15 expr: expr MINUS . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 129
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 82

   16 expr: expr MUL . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 130
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 83

   17 expr: expr DIV . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 131
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 84

   18 expr: expr MOD . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 132
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 85

    3 stmt: expr SEMI .

    $default  reduce using rule 3 (stmt)


State 86

   36 assignexpr: lvalue ASSIGN . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 87

   32 term: lvalue D_PLUS .

    $default  reduce using rule 32 (term)


State 88

   34 term: lvalue D_MINUS .

    $default  reduce using rule 34 (term)


State 89

   46 member: lvalue DOT . ID

    ID  shift, and go to state 134


State 90

   56 methodcall: D_DOT . ID L_PAR elist R_PAR

    ID  shift, and go to state 135


State 91

   47 member: lvalue L_BRA . expr R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 136
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 92

   55 normcall: L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 137
    objectdef   go to state 34
    const       go to state 38


State 93

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


State 94

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


State 95

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


State 96

   48 member: call DOT . ID

    ID  shift, and go to state 138


State 97

   49 member: call L_BRA . expr R_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 139
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 98

   50 call: call L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 140
    objectdef   go to state 34
    const       go to state 38


State 99

   73 funcargs: L_PAR . idlist R_PAR

    ID  shift, and go to state 141

    $default  reduce using rule 86 (idlist)

    idlist  go to state 142


State 100

   77 funcdef: funcprefix funcargs . funcblockstart funcbody funcblockend

    $default  reduce using rule 75 (funcblockstart)

    funcblockstart  go to state 143


State 101

   89 ifstmt: ifprefix stmt .
   90       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 144

    ELSE      [reduce using rule 89 (ifstmt)]
    $default  reduce using rule 89 (ifstmt)

    elseprefix  go to state 145


State 102

   92 whilecond: L_PAR . expr R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 146
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 103

   93 whilestmt: whilestart whilecond . stmt loopstmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 147
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 104

  102 forstmt: forprefix N . elist R_PAR N stmt $@3 N loopstmt

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 148
    objectdef   go to state 34
    const       go to state 38


State 105

    8 stmt: break SEMI .

    $default  reduce using rule 8 (stmt)


State 106

    9 stmt: continue SEMI .

    $default  reduce using rule 9 (stmt)


State 107

   52 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 149


State 108

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   65 indexedelem: LC_BRA expr . COLON expr RC_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    COLON       shift, and go to state 150


State 109

   59 comma_elist: COMMA . expr comma_elist

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 151
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 110

   57 elist: expr comma_elist .

    $default  reduce using rule 57 (elist)


State 111

   61 objectdef: L_BRA elist R_BRA .

    $default  reduce using rule 61 (objectdef)


State 112

   62 objectdef: L_BRA indexed R_BRA .

    $default  reduce using rule 62 (objectdef)


State 113

   64 indexed: indexed COMMA . indexedelem

    LC_BRA  shift, and go to state 54

    indexedelem  go to state 152


State 114

   28 term: L_PAR expr R_PAR .

    $default  reduce using rule 28 (term)


State 115

   40 primary: L_PAR funcdef R_PAR .
   52 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 153

    $default  reduce using rule 40 (primary)


State 116

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   87 ifprefix: IF L_PAR expr . R_PAR

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_PAR       shift, and go to state 154


State 117

  100 forprefix: FOR $@2 L_PAR . elist SEMI M expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 155
    objectdef   go to state 34
    const       go to state 38


State 118

  106 returnstmt: RETURN expr SEMI .

    $default  reduce using rule 106 (returnstmt)


State 119

   66 rec_stmt: rec_stmt . stmt
   69 block: LC_BRA $@1 rec_stmt . RC_BRA

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    RC_BRA    shift, and go to state 156
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 157
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 120

   26 expr: expr OR M . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 158
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 121

   25 expr: expr AND M . expr

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 159
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 122

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   23     | expr EQ expr .
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 123

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   24     | expr NOT_EQ expr .
   25     | expr . AND M expr
   26     | expr . OR M expr

    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 124

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   19     | expr GREATER expr .
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 19 (expr)


State 125

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   20     | expr GREATER_EQ expr .
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 20 (expr)


State 126

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   21     | expr LESS expr .
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 127

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   22     | expr LESS_EQ expr .
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    MOD    shift, and go to state 84

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 128

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    MUL  shift, and go to state 82
    DIV  shift, and go to state 83
    MOD  shift, and go to state 84

    $default  reduce using rule 14 (expr)


State 129

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    MUL  shift, and go to state 82
    DIV  shift, and go to state 83
    MOD  shift, and go to state 84

    $default  reduce using rule 15 (expr)


State 130

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   16     | expr MUL expr .
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    $default  reduce using rule 16 (expr)


State 131

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   17     | expr DIV expr .
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    $default  reduce using rule 17 (expr)


State 132

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   18     | expr MOD expr .
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr

    $default  reduce using rule 18 (expr)


State 133

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   36 assignexpr: lvalue ASSIGN expr .

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 36 (assignexpr)


State 134

   46 member: lvalue DOT ID .

    $default  reduce using rule 46 (member)


State 135

   56 methodcall: D_DOT ID . L_PAR elist R_PAR

    L_PAR  shift, and go to state 160


State 136

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   47 member: lvalue L_BRA expr . R_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_BRA       shift, and go to state 161


State 137

   55 normcall: L_PAR elist . R_PAR

    R_PAR  shift, and go to state 162


State 138

   48 member: call DOT ID .

    $default  reduce using rule 48 (member)


State 139

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   49 member: call L_BRA expr . R_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_BRA       shift, and go to state 163


State 140

   50 call: call L_PAR elist . R_PAR

    R_PAR  shift, and go to state 164


State 141

   84 idlist: ID .

    $default  reduce using rule 84 (idlist)


State 142

   73 funcargs: L_PAR idlist . R_PAR
   85 idlist: idlist . COMMA ID

    R_PAR  shift, and go to state 165
    COMMA  shift, and go to state 166


State 143

   77 funcdef: funcprefix funcargs funcblockstart . funcbody funcblockend

    LC_BRA  shift, and go to state 22

    block     go to state 167
    funcbody  go to state 168


State 144

   88 elseprefix: ELSE .

    $default  reduce using rule 88 (elseprefix)


State 145

   90 ifstmt: ifprefix stmt elseprefix . stmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 169
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 146

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   92 whilecond: L_PAR expr . R_PAR

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    R_PAR       shift, and go to state 170


State 147

   93 whilestmt: whilestart whilecond stmt . loopstmt

    $default  reduce using rule 94 (loopstart)

    loopstart  go to state 171
    loopstmt   go to state 172


State 148

  102 forstmt: forprefix N elist . R_PAR N stmt $@3 N loopstmt

    R_PAR  shift, and go to state 173


State 149

   52 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 153


State 150

   65 indexedelem: LC_BRA expr COLON . expr RC_BRA

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 174
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 151

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   59 comma_elist: COMMA expr . comma_elist

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    COMMA       shift, and go to state 109

    $default  reduce using rule 60 (comma_elist)

    comma_elist  go to state 175


State 152

   64 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 64 (indexed)


State 153

   52 call: L_PAR funcdef R_PAR L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 176
    objectdef   go to state 34
    const       go to state 38


State 154

   87 ifprefix: IF L_PAR expr R_PAR .

    $default  reduce using rule 87 (ifprefix)


State 155

  100 forprefix: FOR $@2 L_PAR elist . SEMI M expr SEMI

    SEMI  shift, and go to state 177


State 156

   69 block: LC_BRA $@1 rec_stmt RC_BRA .

    $default  reduce using rule 69 (block)


State 157

   66 rec_stmt: rec_stmt stmt .

    $default  reduce using rule 66 (rec_stmt)


State 158

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   26     | expr OR M expr .

    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 26 (expr)


State 159

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   25     | expr AND M expr .
   26     | expr . OR M expr

    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84

    $default  reduce using rule 25 (expr)


State 160

   56 methodcall: D_DOT ID L_PAR . elist R_PAR

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 58 (elist)

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 178
    objectdef   go to state 34
    const       go to state 38


State 161

   47 member: lvalue L_BRA expr R_BRA .

    $default  reduce using rule 47 (member)


State 162

   55 normcall: L_PAR elist R_PAR .

    $default  reduce using rule 55 (normcall)


State 163

   49 member: call L_BRA expr R_BRA .

    $default  reduce using rule 49 (member)


State 164

   50 call: call L_PAR elist R_PAR .

    $default  reduce using rule 50 (call)


State 165

   73 funcargs: L_PAR idlist R_PAR .

    $default  reduce using rule 73 (funcargs)


State 166

   85 idlist: idlist COMMA . ID

    ID  shift, and go to state 179


State 167

   74 funcbody: block .

    $default  reduce using rule 74 (funcbody)


State 168

   77 funcdef: funcprefix funcargs funcblockstart funcbody . funcblockend

    $default  reduce using rule 76 (funcblockend)

    funcblockend  go to state 180


State 169

   90 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 90 (ifstmt)


State 170

   92 whilecond: L_PAR expr R_PAR .

    $default  reduce using rule 92 (whilecond)


State 171

   96 loopstmt: loopstart . stmt loopend

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 181
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 172

   93 whilestmt: whilestart whilecond stmt loopstmt .

    $default  reduce using rule 93 (whilestmt)


State 173

  102 forstmt: forprefix N elist R_PAR . N stmt $@3 N loopstmt

    $default  reduce using rule 97 (N)

    N  go to state 182


State 174

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
   65 indexedelem: LC_BRA expr COLON expr . RC_BRA

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    RC_BRA      shift, and go to state 183


State 175

   59 comma_elist: COMMA expr comma_elist .

    $default  reduce using rule 59 (comma_elist)


State 176

   52 call: L_PAR funcdef R_PAR L_PAR elist . R_PAR

    R_PAR  shift, and go to state 184


State 177

  100 forprefix: FOR $@2 L_PAR elist SEMI . M expr SEMI

    $default  reduce using rule 98 (M)

    M  go to state 185


State 178

   56 methodcall: D_DOT ID L_PAR elist . R_PAR

    R_PAR  shift, and go to state 186


State 179

   85 idlist: idlist COMMA ID .

    $default  reduce using rule 85 (idlist)


State 180

   77 funcdef: funcprefix funcargs funcblockstart funcbody funcblockend .

    $default  reduce using rule 77 (funcdef)


State 181

   96 loopstmt: loopstart stmt . loopend

    $default  reduce using rule 95 (loopend)

    loopend  go to state 187


State 182

  102 forstmt: forprefix N elist R_PAR N . stmt $@3 N loopstmt

    NOT       shift, and go to state 1
    D_PLUS    shift, and go to state 2
    D_MINUS   shift, and go to state 3
    UMINUS    shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 188
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcprefix  go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    break       go to state 45
    continue    go to state 46
    returnstmt  go to state 47


State 183

   65 indexedelem: LC_BRA expr COLON expr RC_BRA .

    $default  reduce using rule 65 (indexedelem)


State 184

   52 call: L_PAR funcdef R_PAR L_PAR elist R_PAR .

    $default  reduce using rule 52 (call)


State 185

  100 forprefix: FOR $@2 L_PAR elist SEMI M . expr SEMI

    NOT      shift, and go to state 1
    D_PLUS   shift, and go to state 2
    D_MINUS  shift, and go to state 3
    UMINUS   shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 189
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 186

   56 methodcall: D_DOT ID L_PAR elist R_PAR .

    $default  reduce using rule 56 (methodcall)


State 187

   96 loopstmt: loopstart stmt loopend .

    $default  reduce using rule 96 (loopstmt)


State 188

  102 forstmt: forprefix N elist R_PAR N stmt . $@3 N loopstmt

    $default  reduce using rule 101 ($@3)

    $@3  go to state 190


State 189

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQ expr
   21     | expr . LESS expr
   22     | expr . LESS_EQ expr
   23     | expr . EQ expr
   24     | expr . NOT_EQ expr
   25     | expr . AND M expr
   26     | expr . OR M expr
  100 forprefix: FOR $@2 L_PAR elist SEMI M expr . SEMI

    OR          shift, and go to state 72
    AND         shift, and go to state 73
    EQ          shift, and go to state 74
    NOT_EQ      shift, and go to state 75
    GREATER     shift, and go to state 76
    GREATER_EQ  shift, and go to state 77
    LESS        shift, and go to state 78
    LESS_EQ     shift, and go to state 79
    PLUS        shift, and go to state 80
    MINUS       shift, and go to state 81
    MUL         shift, and go to state 82
    DIV         shift, and go to state 83
    MOD         shift, and go to state 84
    SEMI        shift, and go to state 191


State 190

  102 forstmt: forprefix N elist R_PAR N stmt $@3 . N loopstmt

    $default  reduce using rule 97 (N)

    N  go to state 192


State 191

  100 forprefix: FOR $@2 L_PAR elist SEMI M expr SEMI .

    $default  reduce using rule 100 (forprefix)


State 192

  102 forstmt: forprefix N elist R_PAR N stmt $@3 N . loopstmt

    $default  reduce using rule 94 (loopstart)

    loopstart  go to state 171
    loopstmt   go to state 193


State 193

  102 forstmt: forprefix N elist R_PAR N stmt $@3 N loopstmt .

    $default  reduce using rule 102 (forstmt)
